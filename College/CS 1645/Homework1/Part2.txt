NUM_OF_RANDOMS: 10
REPEATER: 1000

			|	Sort Whole (Part2_combined.c)		|	Sort Halves and Merge (Part2_split.c)
------------------------------------------------------------------------------------------------
Average:	|	2μs									|	1μs
Fastest:	|	1μs									|	1μs
Slowest:	|	3μs									|	4μs


================================================================================================
================================================================================================


NUM_OF_RANDOMS: 1000
REPEATER: 100

			|	Sort Whole (Part2_combined.c)		|	Sort Halves and Merge (Part2_split.c)
------------------------------------------------------------------------------------------------
Average:	|	18093μs								|	13499μs
Fastest:	|	17760μs								|	13313μs
Slowest:	|	18494μs								|	13650μs


================================================================================================
================================================================================================


NUM_OF_RANDOMS: 10000
REPEATER: 100

			|	Sort Whole (Part2_combined.c)		|	Sort Halves and Merge (Part2_split.c)
------------------------------------------------------------------------------------------------
Average:	|	2819090μs							|	1408677μs
Fastest:	|	2800604μs							|	1399519μs
Slowest:	|	2834849μs							|	1416778μs


================================================================================================
Sorting the two halves of an array and then merging is faster than sorting the whole array at once, seemingly in all cases.