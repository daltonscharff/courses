The use of parallelism is crucial in getting faster runtimes out of a program. In this situation, data parallelism was fastest at 1.6 seconds, followed by task parallelism at 2.9 seconds and serial at 3.3 seconds. Data parallelism performed better than task parallelism because task parallelism required a lot of recopying the entire array as well as a large amount of locking. Both forms of parallelism were faster than serial because they could utilize multiple cpus and the solution was 'embarassingly parallel'. Task parallelism would perhaps perform better if my implementation didn't require so much copying. It would also perform better in situations where the main protion of the problem wasn't all just sorting through arrays to do the same work.